const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

const MINUTES_DIR = path.join(__dirname, '..', 'meeting-minutes');

if (!fs.existsSync(MINUTES_DIR)) {
  fs.mkdirSync(MINUTES_DIR, { recursive: true });
}

function generateMeetingMinutesPDF(summary, sessionInfo) {
  return new Promise((resolve, reject) => {
    try {
      const fileName = `meeting-minutes-${sessionInfo.sessionId}.pdf`;
      const filePath = path.join(MINUTES_DIR, fileName);
      
      const doc = new PDFDocument({
        size: 'A4',
        margins: {
          top: 50,
          bottom: 50,
          left: 72,
          right: 72
        }
      });
      
      const stream = fs.createWriteStream(filePath);
      doc.pipe(stream);
      
      doc.fontSize(24)
         .font('Helvetica-Bold')
         .text('Meeting Minutes', { align: 'center' });
      
      doc.moveDown();
      doc.fontSize(10)
         .font('Helvetica')
         .text(`Session ID: ${sessionInfo.sessionId}`, { align: 'center' });
      
      const startDate = new Date(sessionInfo.startTime).toLocaleString();
      const duration = sessionInfo.endTime 
        ? Math.round((sessionInfo.endTime - sessionInfo.startTime) / 60000) + ' minutes'
        : 'Ongoing';
      
      doc.text(`Date: ${startDate}`, { align: 'center' });
      doc.text(`Duration: ${duration}`, { align: 'center' });
      doc.text(`Participants: ${sessionInfo.participants.length}`, { align: 'center' });
      
      doc.moveDown(2);
      doc.strokeColor('#000000')
         .lineWidth(1)
         .moveTo(72, doc.y)
         .lineTo(540, doc.y)
         .stroke();
      
      doc.moveDown();
      
      doc.fontSize(16)
         .font('Helvetica-Bold')
         .text('Overview');
      doc.moveDown(0.5);
      doc.fontSize(11)
         .font('Helvetica')
         .text(summary.overview || 'No overview available', {
           align: 'justify'
         });
      
      doc.moveDown(1.5);
      
      addSection(doc, 'Key Discussion Points', summary.discussion_points);
      addSection(doc, 'Decisions Made', summary.decisions);
      addSection(doc, 'Action Items', summary.action_items);
      addSection(doc, 'Highlights & Notable Quotes', summary.highlights);
      addSection(doc, 'Next Steps', summary.next_steps);
      
      doc.moveDown(2);
      doc.fontSize(8)
         .font('Helvetica-Oblique')
         .text('Generated by AI Learners India Bot', { align: 'center' });
      doc.text(`${new Date().toLocaleString()}`, { align: 'center' });
      
      doc.end();
      
      stream.on('finish', () => {
        console.log(`üìÑ PDF generated: ${filePath}`);
        resolve(filePath);
      });
      
      stream.on('error', (error) => {
        console.error('‚ùå PDF generation error:', error);
        reject(error);
      });
      
    } catch (error) {
      console.error('‚ùå Error creating PDF:', error);
      reject(error);
    }
  });
}

function addSection(doc, title, items) {
  doc.fontSize(14)
     .font('Helvetica-Bold')
     .text(title);
  doc.moveDown(0.5);
  
  if (!items || items.length === 0 || (items.length === 1 && items[0].toLowerCase().includes('none'))) {
    doc.fontSize(11)
       .font('Helvetica-Oblique')
       .text('None', { indent: 20 });
  } else {
    doc.fontSize(11)
       .font('Helvetica');
    items.forEach((item, index) => {
      doc.text(`${index + 1}. ${item}`, {
        indent: 20,
        align: 'justify'
      });
      doc.moveDown(0.3);
    });
  }
  
  doc.moveDown(1);
}

function cleanupOldPDFs(olderThanDays = 30) {
  try {
    const files = fs.readdirSync(MINUTES_DIR);
    const now = Date.now();
    const maxAge = olderThanDays * 24 * 60 * 60 * 1000;
    
    let deletedCount = 0;
    
    files.forEach(file => {
      const filePath = path.join(MINUTES_DIR, file);
      const stats = fs.statSync(filePath);
      
      if (now - stats.mtimeMs > maxAge) {
        fs.unlinkSync(filePath);
        deletedCount++;
      }
    });
    
    if (deletedCount > 0) {
      console.log(`üßπ Cleaned up ${deletedCount} old PDF files`);
    }
  } catch (error) {
    console.error('‚ùå Error cleaning up PDFs:', error);
  }
}

module.exports = {
  generateMeetingMinutesPDF,
  cleanupOldPDFs,
  MINUTES_DIR
};
